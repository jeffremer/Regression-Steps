#!/usr/bin/env ruby 

# == Synopsis 
#   Retrieve snapshot data from Scrumy projects
#
# == Examples
#   This command retrieves snapshot data
#     regression project_name:password [project_name:password] 
#
# == Usage 
#   burndown [options] project_name:password [project_name:password] 
#
#   For help use: regression -h
#
# == Options
#   -h, --help          Displays help message
#   -v, --version       Display the version, then exit
#   -q, --quiet         Output as little as possible, overrides verbose
#   -V, --verbose       Verbose output
#
# == Author
#   Jeff Remer
#
# == Copyright
#   Copyright (c) 2011 Jeff Remer. Licensed under the MIT License:
#   http://www.opensource.org/licenses/mit-license.php

require 'optparse' 
require 'rdoc/usage'
require 'ostruct'
require 'highline/import'
require 'date'

require 'scrumy_client'

class App
  VERSION = '0.0.1'
  
  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    # Set defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.quiet = false
  end

  # Parse options, check arguments, then process the command
  def run
        
    if parsed_options? && arguments_valid? 
      
      puts "Start at #{DateTime.now}\n\n" if @options.verbose
      
      output_options if @options.verbose # [Optional]
            
      process_arguments            
      process_command
      
      puts "\nFinished at #{DateTime.now}" if @options.verbose
      
    else
      output_usage
    end
      
  end
  
  protected
  
    def parsed_options?
      
      # Specify options
      opts = OptionParser.new 
      opts.on('-v', '--version')    { output_version ; exit 0 }
      opts.on('-h', '--help')       { output_help }
      opts.on('-V', '--verbose')    { @options.verbose = true }  
      opts.on('-q', '--quiet')      { @options.quiet = true }
            
      opts.parse!(@arguments) rescue return false
      
      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      true if @arguments.length >= 1 
    end
    
    # Setup the arguments
    def process_arguments
      @projects = []
      @arguments.each{|arg|
        p = arg.split(':')
        @projects << { "name" => p[0], "password" => p[1]}
      }      
    end
    
    def output_help
      output_version
      RDoc::usage() #exits app
    end
    
    def output_usage
      RDoc::usage('usage') # gets usage from comments above
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    def process_command
      days = Hash.new
      @projects.each {|project|
        client = ScrumyClient.new(project['name'], project['password'])
        snapshots = client.snapshots
        snapshots.each{|snapshot|
          s = snapshot['snapshot']
          if !days.has_key?(s['snapshot_date'])
            days[s['snapshot_date']] = {'total' => s['hours_total'], 'remaining'=>s['hours_remaining']}
          else
            day = days[s['snapshot_date']]
            day['total'] += s['hours_total']
            day['remaining'] += s['hours_remaining']
          end              
        }
      }
      puts "Day\t\tTotal\tRemaining"
      days.keys.each{|key|
        puts "#{key}\t#{days[key]['total']}\t#{days[key]['remaining']}"
      }

    end
end

# Create and run the application
app = App.new(ARGV, STDIN)
app.run
